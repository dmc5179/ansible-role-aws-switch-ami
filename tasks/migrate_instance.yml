---

- name: Show donor instance info
  debug:
    var: donor_instance

- fail:

  #TODO: Set the IAM instance profile if one is used
- name: Create replacement instance
  delegate_to: localhost
  community.aws.ec2_instance:
    aws_access_key: "{{ ansible_env.AWS_ACCESS_KEY_ID | default(omit) }}"
    aws_secret_key: "{{ ansible_env.AWS_SECRET_ACCESS_KEY | default(omit) }}"
    security_token: "{{ ansible_env.AWS_SESSION_TOKEN | default(omit) }}"
    region: "{{ ansible_env.AWS_DEFAULT_REGION | default(omit) }}"
    ec2_url: '{{ aws_ec2_url | default(omit) }}'
    validate_certs: '{{ aws_ssl_enabled }}'
    image_id: '{{ target_ami_id }}'
    wait: true
    name: "Replacement for {{ donor_instance.instance_id }}"
    instance_profile_name: '{{ donor_instance.iam_instance_profile | default(omit) }}'
    availability_zone: '{{ donor_instance.placement.availability_zone }}'
    key_name: '{{ donor_instance.key_name }}'
    vpc_subnet_id: '{{ donor_instance.subnet_id }}'
    security_groups: "{{ donor_instance.security_groups }}",
    tags: "{{ donor_instance.tags }}",
    instance_type: '{{ donor_instance.instance_type }}'
    ebs_optimized: '{{ donor_instance.ebs_optimized }}'
    placement_group: "{{ donor_instance.placement.group_name }}"
    state: running
  register: replacement_instance

- name: Wait for replace instance to finish booting
  wait_for:
    timeout: 60
  delegate_to: localhost

- name: Refetch replacement instance info
  delegate_to: localhost
  community.aws.ec2_instance_info:
    aws_access_key: "{{ ansible_env.AWS_ACCESS_KEY_ID | default(omit) }}"
    aws_secret_key: "{{ ansible_env.AWS_SECRET_ACCESS_KEY | default(omit) }}"
    security_token: "{{ ansible_env.AWS_SESSION_TOKEN | default(omit) }}"
    region: "{{ ansible_env.AWS_DEFAULT_REGION | default(omit) }}"
    ec2_url: '{{ aws_ec2_url | default(omit) }}'
    validate_certs: '{{ aws_ssl_enabled }}'
    instance_ids:
      - '{{ replacement_instance.instances[0].instance_id }}'
  register: replacement_instance

- name: Show replacement instance info again
  debug:
    var: replacement_instance

- name: Stop replacement instance
  delegate_to: localhost
  community.aws.ec2_instance:
    aws_access_key: "{{ ansible_env.AWS_ACCESS_KEY_ID | default(omit) }}"
    aws_secret_key: "{{ ansible_env.AWS_SECRET_ACCESS_KEY | default(omit) }}"
    security_token: "{{ ansible_env.AWS_SESSION_TOKEN | default(omit) }}"
    region: "{{ ansible_env.AWS_DEFAULT_REGION | default(omit) }}"
    ec2_url: '{{ aws_ec2_url | default(omit) }}'
    validate_certs: '{{ aws_ssl_enabled }}'
    state: stopped
    instance_ids:
      - '{{ replacement_instance.instances[0].instance_id }}'

- name: Detach root volume from replacement instance
  delegate_to: localhost
  amazon.aws.ec2_vol:
    aws_access_key: "{{ ansible_env.AWS_ACCESS_KEY_ID | default(omit) }}"
    aws_secret_key: "{{ ansible_env.AWS_SECRET_ACCESS_KEY | default(omit) }}"
    security_token: "{{ ansible_env.AWS_SESSION_TOKEN | default(omit) }}"
    region: "{{ ansible_env.AWS_DEFAULT_REGION | default(omit) }}"
    ec2_url: '{{ aws_ec2_url | default(omit) }}'
    validate_certs: '{{ aws_ssl_enabled }}'
    id: '{{ replacement_instance.instances[0].block_device_mappings[0].ebs.volume_id }}'
    instance: None

- name: Delete root volume from replacement instance
  delegate_to: localhost
  amazon.aws.ec2_vol:
    aws_access_key: "{{ ansible_env.AWS_ACCESS_KEY_ID | default(omit) }}"
    aws_secret_key: "{{ ansible_env.AWS_SECRET_ACCESS_KEY | default(omit) }}"
    security_token: "{{ ansible_env.AWS_SESSION_TOKEN | default(omit) }}"
    region: "{{ ansible_env.AWS_DEFAULT_REGION | default(omit) }}"
    ec2_url: '{{ aws_ec2_url | default(omit) }}'
    validate_certs: '{{ aws_ssl_enabled }}'
    id: '{{ replacement_instance.instances[0].block_device_mappings[0].ebs.volume_id }}'
    state: absent

- name: Initialize my_snaps
  delegate_to: localhost
  set_fact:
    my_snaps: []

- name: Initialize my_vols
  delegate_to: localhost
  set_fact:
    my_vols: []

- name: Create snapshots of the donor instance volumes
  include_tasks: snapshot_one.yml
  vars:
    block_device: '{{ block_device_index }}'
  loop: '{{ donor_instance.block_device_mappings }}'
  loop_control:
    loop_var: block_device_index

- name: Show my_snaps
  delegate_to: localhost
  debug:
    var: my_snaps

- name: Start replacement instance
  delegate_to: localhost
  community.aws.ec2_instance:
    aws_access_key: "{{ ansible_env.AWS_ACCESS_KEY_ID | default(omit) }}"
    aws_secret_key: "{{ ansible_env.AWS_SECRET_ACCESS_KEY | default(omit) }}"
    security_token: "{{ ansible_env.AWS_SESSION_TOKEN | default(omit) }}"
    region: "{{ ansible_env.AWS_DEFAULT_REGION | default(omit) }}"
    ec2_url: '{{ aws_ec2_url | default(omit) }}'
    validate_certs: '{{ aws_ssl_enabled }}'
    state: running
    instance_ids:
      - '{{ replacement_instance.instances[0].instance_id }}'
